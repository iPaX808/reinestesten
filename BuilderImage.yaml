apiVersion: v1
kind: Template
metadata:
  name: oleserstesprojekt
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${DEPLOYMENT_CONFIG_NAME}-nginx-config
  data:
    http.conf: |
      error_log /var/log/nginx/debug.log debug;

      upstream backendCalculationFinancing {
          least_conn;
          server develop-calculation-financing-old:8080 max_fails=5;
      }

      upstream backendCalculationLeasing {
          least_conn;
          server develop-calculation-leasing:8080 max_fails=5;
      }

      upstream backendCreditPreApproval {
          least_conn;
          server develop-credit-pre-approval:8004 max_fails=5;
      }
    server.conf: |
      listen       8003;

      server_name  localhost;
      # needed because otherwise all redirects will go to port 8080
      port_in_redirect off;

      location ~ ^/(calculation-financing-api)/(.*)$ {
          proxy_bind $server_addr;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_pass http://backendCalculationFinancing/$2$is_args$args;
      }

      location ~ ^/(calculation-leasing-api)/(.*)$ {
          proxy_bind $server_addr;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_pass http://backendCalculationLeasing/$2$is_args$args;
      }

      location ~ ^/(credit-pre-approval-api)/(.*)$ {
          proxy_bind $server_addr;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_pass http://backendCreditPreApproval/$2$is_args$args;
      }

      location = / {
          root   /usr/share/nginx/html;
          index  index.html;
          expires -1;
          add_header Pragma "no-cache";
          add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
          try_files $uri$args $uri$args/ $uri $uri/ /en/index.html =404;
      }
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${DEPLOYMENT_CONFIG_NAME}
    labels:
      app: ${APP_NAME_LABEL}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${DEPLOYMENT_CONFIG_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME_LABEL}
          deploymentConfig: ${DEPLOYMENT_CONFIG_NAME}
      spec:
        containers:
        - name: sales-services-demo
          image: >-
            docker-registry.default.svc:5000/${IMAGE_NAMESPACE}/${IMAGE_NAME}
          imagePullPolicy: Always
          ports:
          - containerPort: 8003
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /index.html
              port: 8003
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /index.html
              port: 8003
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/http_inc
            name: http-config-volume
          - mountPath: /etc/nginx/conf.d/server_inc
            name: server-config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: http-config-volume
          configMap:
            name: ${DEPLOYMENT_CONFIG_NAME}-nginx-config
            defaultMode: 420
            items:
            - key: http.conf
              path: http.conf
        - name: server-config-volume
          configMap:
            name: ${DEPLOYMENT_CONFIG_NAME}-nginx-config
            defaultMode: 420
            items:
            - key: server.conf
              path: server.conf
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - sales-services-demo
        from:
          kind: ImageStreamTag
          name: ${IMAGE_NAME}
          namespace: ${IMAGE_NAMESPACE}
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    name: ${DEPLOYMENT_CONFIG_NAME}
    labels:
      app: ${APP_NAME_LABEL}
  spec:
    ports:
    - name: 8003-tcp
      port: 8003
      protocol: TCP
      targetPort: 8003
    selector:
      deploymentConfig: ${DEPLOYMENT_CONFIG_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
- description: Deploymentconfig Name
  generate: expression
  name: DEPLOYMENT_CONFIG_NAME
  required: true
- description: Label App
  generate: expression
  name: APP_NAME_LABEL
- description: Image Name:Tag
  generate: expression
  name: IMAGE_NAME
  required: true
- description: Image Space
  name: IMAGE_NAMESPACE
  required: true